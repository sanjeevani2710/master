Experiment 2 :Implement GitHub Operations using Git.
Step 1: Cloning a Repository 
git clone <repository_url> 
Step 2: Making Changes and Creating a Branch 
cd <repository_name> 
git status 
git add example.txt
git commit -m "Add content to example.txt" 
git branch feature
git checkout feature
Step 3: Pushing Changes to GitHub
git remote add origin <repository_url> 
git push origin feature 
Step 4: Collaborating through Pull Requests
Step 5: Syncing Changes 
git checkout main 
git pull origin main 



// Experiment 10 : Minikube Container
docker --version
  kubectl version --client 
  minikube version
sudo usermod -aG docker SUSER
newgrp docker 
minikube start --driver=docker
  eval $(minikube docker -env)
mkdir proj
cd proj
nano index.html
  nano Dockerfile(FROM httpd:2.4
COPY ./public-html/ /usr/local/apache2/htdocs/)
$ docker build -t my-apache2 .
nano deployment.yaml
(apiVersion: apps/v1
kind: Deployment
metadata:
name: my-web-app-deployment
spec:
replicas: 3 # Number of pods to create
selector:
matchLabels:
app: my-web-app # Label to match pods
template:
metadata:
labels:
app: my-web-app # Label assigned to pods
spec:
containers:
- name: my-web-app-container
image: my-web-app:latest # Docker image to use
ports:
- containerPort: 80 # Port to expose)
kubectl apply -f deployment.yaml 
kubectl expose deployment my-httpd-deployment --type=NodePort--port=80
  minikube service my-httpd-deployment --url
  kubectl get pods
kubectl scale deployment my-httpd-deployment --replicas=5
  kubectl get pods
kubectl delete pod (id)
kubectl delete service my-httpd-deployment
